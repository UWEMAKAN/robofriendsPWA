{"version":3,"sources":["components/Scroll/Scroll.module.css","containers/App/App.module.css","reducers.js","components/SearchBox/SearchBox.js","components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","components/ErrorBoundary/ErrorBoundary.js","containers/App/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["module","exports","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","searchBox","props","className","onChange","changed","type","placeholder","card","id","name","email","src","alt","cardList","cardsArray","map","robot","Card","key","classes","CardList","scroll","Scroll","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobot","onSearchChange","filteredRobots","filter","toLowerCase","includes","Loading","Heading","SearchBox","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.85b7a827.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Scroll\":\"Scroll_Scroll__3bsia\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Heading\":\"App_Heading__2J-0I\",\"Loading\":\"App_Loading__1HeUi\"};","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n      // return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n}","import React from 'react';\n\n// import classes from './SearchBox.module.css';\n\nconst searchBox = (props) => {\n  return (\n    <div className='pa2'>\n      <input onChange={ props.changed } className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' />\n    </div>\n  );\n}\n\nexport default searchBox;","import React from 'react';\n\n// import classes from './Card.module.css';\n\nconst card = ({ id, name, email }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${ id }?200x200`} alt='robot'  />\n      <div>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n      </div>\n    </div>\n  );\n}\n\nexport default card;","import React from 'react';\n\nimport classes from './CardList.module.css';\nimport Card from '../Card/Card';\n\nconst cardList = ({ robots }) => {\n  const cardsArray = robots.map(robot => {\n    return <Card key={ robot.id } name={ robot.name } email={ robot.email } id={ robot.id } />\n  });\n  return (\n    <div className={ classes.CardList }>\n      { cardsArray }\n    </div>\n  );\n}\n\nexport default cardList;","import React from 'react';\n\nimport classes from './Scroll.module.css';\n\nconst scroll = (props) => {\n  return (\n    <div className={ classes.Scroll }>\n      { props.children }\n    </div>\n  );\n}\n\nexport default scroll;","import React, { Component } from 'react';\n\nimport classes from './ErrorBoundary.module.css';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ?\n      <div className={ classes.ErrorBoundary }>\n        <h1>Ooooops! Something did not go well!!!</h1>\n      </div> :\n      this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport classes from './App.module.css';\nimport './App.module.css';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport CardList from '../../components/CardList/CardList';\nimport Scroll from '../../components/Scroll/Scroll';\nimport ErrorBoundary from '../../components/ErrorBoundary/ErrorBoundary';\n// import { robots as Robots } from '../../robot';\nimport { setSearchField, requestRobots } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobot: () => dispatch(requestRobots())\n  };\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobot();\n  }\n  \n  render() {\n    const {robots, isPending, searchField, onSearchChange } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ?\n      <div className={ `${ classes.Loading } tc` }>\n        <h1 className={ `${ classes.Heading } f1` } >LOADING...</h1>\n      </div> :\n      <div className='tc'>\n        <h1 className={ `${ classes.Heading } f1` }>RoboFriends</h1>\n        <SearchBox changed={ onSearchChange }/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={ filteredRobots }/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('http://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}